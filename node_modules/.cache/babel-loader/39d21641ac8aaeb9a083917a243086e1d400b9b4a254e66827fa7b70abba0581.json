{"ast":null,"code":"var _jsxFileName = \"C:\\\\MyWebProject\\\\kioskmaps\\\\frontend\\\\src\\\\components\\\\Maps.js\",\n  _s = $RefreshSig$();\nimport { GoogleMap, useLoadScript, MarkerF } from '@react-google-maps/api';\nimport { useState, useEffect } from \"react\";\nimport useFetch from \"./useFetch\";\nimport React from 'react';\n\n/*\r\nasync function Location(position){\r\n    const { error, isPending, data: kiosks } = await useFetch('http://localhost:8000/kiosk');\r\n    console.log(kiosks);\r\n    let array = [];\r\n    kiosks.forEach((kiosk) => {\r\n\r\n        if(array.length != 5){\r\n            array.push(kiosk);\r\n        }\r\n        else{\r\n            for (let i = 0; i < array.length; i++){\r\n                const dist1 =calculateDistance(position.lat, position.lng, array[i].latitude, array[i].logitude);\r\n                const dist2 =calculateDistance(position.lat, position.lng, kiosk.latitude, kiosk.logitude);\r\n                if (dist2 < dist1){\r\n                    array.splice(i, 1);\r\n                    array.push(kiosk);\r\n                }\r\n            }\r\n        }\r\n\r\n    });\r\n    return(\r\n        <div>\r\n            {array.forEach((kiosk) => {\r\n                const lat = kiosk.latitude;\r\n                const lng= kiosk.longitude;\r\n                <MarkerF position={{lat:lat, lng: lng}}/>\r\n            })};\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction calculateDistance(x1, y1, x2, y2){\r\n    const distx = (x1) - (x2);\r\n    const disty = (y1) - (y2);\r\n    var dist = Math.power(Math.power(distx, 2) + Math.power(disty, 2), 0.5);\r\n    return dist;\r\n\r\n    \r\n}\r\n*/\n\n//<Location location={lat}/>\n//const center = {lat:1.3046688076702777, lng: 103.80008079564587}\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Maps = lat => {\n  _s();\n  const {\n    isLoaded\n  } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyCUvExdvtB4lKu2IJjTfBka8254ImunKnk\"\n  });\n  console.log(lat);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 26\n  }, this);\n  return /*#__PURE__*/_jsxDEV(GoogleMap, {\n    zoom: 15,\n    center: lat,\n    mapContainerClassName: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(MarkerF, {\n      position: lat,\n      icon: \"https://img.icons8.com/plasticine/100/user-location.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(Maps, \"fRYUc8216GFzAjlYDEKboTmtS+U=\", false, function () {\n  return [useLoadScript];\n});\n_c = Maps;\nexport default Maps;\n\n/*\r\n    { error && <div>{ error }</div> }\r\n    { isPending && <div>Loading...</div> }\r\n    {kiosk && kiosk.map(kiosk => (\r\n        <div>\r\n            <h3>Location of {kiosk.name}</h3>\r\n            <h3>{kiosk.latitude}</h3>\r\n            <h3>{kiosk.longitude}</h3>\r\n        </div>\r\n    ))}\r\n\r\n    <Location position={lat}/>\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Maps\");","map":{"version":3,"names":["GoogleMap","useLoadScript","MarkerF","useState","useEffect","useFetch","React","jsxDEV","_jsxDEV","Maps","lat","_s","isLoaded","googleMapsApiKey","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","zoom","center","mapContainerClassName","position","icon","_c","$RefreshReg$"],"sources":["C:/MyWebProject/kioskmaps/frontend/src/components/Maps.js"],"sourcesContent":["import { GoogleMap, useLoadScript, MarkerF } from '@react-google-maps/api';\r\nimport {useState, useEffect} from \"react\";\r\nimport useFetch from \"./useFetch\";\r\nimport React from 'react';\r\n\r\n\r\n/*\r\nasync function Location(position){\r\n    const { error, isPending, data: kiosks } = await useFetch('http://localhost:8000/kiosk');\r\n    console.log(kiosks);\r\n    let array = [];\r\n    kiosks.forEach((kiosk) => {\r\n\r\n        if(array.length != 5){\r\n            array.push(kiosk);\r\n        }\r\n        else{\r\n            for (let i = 0; i < array.length; i++){\r\n                const dist1 =calculateDistance(position.lat, position.lng, array[i].latitude, array[i].logitude);\r\n                const dist2 =calculateDistance(position.lat, position.lng, kiosk.latitude, kiosk.logitude);\r\n                if (dist2 < dist1){\r\n                    array.splice(i, 1);\r\n                    array.push(kiosk);\r\n                }\r\n            }\r\n        }\r\n\r\n    });\r\n    return(\r\n        <div>\r\n            {array.forEach((kiosk) => {\r\n                const lat = kiosk.latitude;\r\n                const lng= kiosk.longitude;\r\n                <MarkerF position={{lat:lat, lng: lng}}/>\r\n            })};\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction calculateDistance(x1, y1, x2, y2){\r\n    const distx = (x1) - (x2);\r\n    const disty = (y1) - (y2);\r\n    var dist = Math.power(Math.power(distx, 2) + Math.power(disty, 2), 0.5);\r\n    return dist;\r\n\r\n    \r\n}\r\n*/\r\n\r\n//<Location location={lat}/>\r\n//const center = {lat:1.3046688076702777, lng: 103.80008079564587}\r\nconst Maps = (lat) => {\r\n    const {isLoaded} = useLoadScript({\r\n        googleMapsApiKey: \"AIzaSyCUvExdvtB4lKu2IJjTfBka8254ImunKnk\",\r\n    });\r\n    console.log(lat);\r\n    if(!isLoaded) return <div>Loading...</div>;\r\n    return ( \r\n        <GoogleMap zoom={15} center={lat} mapContainerClassName='map-container'>\r\n            <MarkerF position={lat} icon=\"https://img.icons8.com/plasticine/100/user-location.png\"/>\r\n        </GoogleMap>\r\n     );\r\n}\r\n \r\nexport default Maps;\r\n\r\n/*\r\n    { error && <div>{ error }</div> }\r\n    { isPending && <div>Loading...</div> }\r\n    {kiosk && kiosk.map(kiosk => (\r\n        <div>\r\n            <h3>Location of {kiosk.name}</h3>\r\n            <h3>{kiosk.latitude}</h3>\r\n            <h3>{kiosk.longitude}</h3>\r\n        </div>\r\n    ))}\r\n\r\n    <Location position={lat}/>\r\n*/"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,aAAa,EAAEC,OAAO,QAAQ,wBAAwB;AAC1E,SAAQC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AACzC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,KAAK,MAAM,OAAO;;AAGzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,IAAI,GAAIC,GAAG,IAAK;EAAAC,EAAA;EAClB,MAAM;IAACC;EAAQ,CAAC,GAAGX,aAAa,CAAC;IAC7BY,gBAAgB,EAAE;EACtB,CAAC,CAAC;EACFC,OAAO,CAACC,GAAG,CAACL,GAAG,CAAC;EAChB,IAAG,CAACE,QAAQ,EAAE,oBAAOJ,OAAA;IAAAQ,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAC1C,oBACIZ,OAAA,CAACR,SAAS;IAACqB,IAAI,EAAE,EAAG;IAACC,MAAM,EAAEZ,GAAI;IAACa,qBAAqB,EAAC,eAAe;IAAAP,QAAA,eACnER,OAAA,CAACN,OAAO;MAACsB,QAAQ,EAAEd,GAAI;MAACe,IAAI,EAAC;IAAyD;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjF,CAAC;AAEpB,CAAC;AAAAT,EAAA,CAXKF,IAAI;EAAA,QACaR,aAAa;AAAA;AAAAyB,EAAA,GAD9BjB,IAAI;AAaV,eAAeA,IAAI;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}